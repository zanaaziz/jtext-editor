/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.AbstractButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.datatransfer.*;
import java.awt.Toolkit;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Zana
 */
public class Form extends javax.swing.JFrame {
        
    String ClipBoardData = "";
    String CurrentFileDirectory = "";
        
    public Form() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newPage = new javax.swing.JMenuItem();
        openPage = new javax.swing.JMenuItem();
        saveFile = new javax.swing.JMenuItem();
        savePage = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cut = new javax.swing.JMenuItem();
        copy = new javax.swing.JMenuItem();
        paste = new javax.swing.JMenuItem();
        delete = new javax.swing.JMenuItem();
        selectAll = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JText");
        setPreferredSize(new java.awt.Dimension(800, 600));

        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        jMenuBar1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        fileMenu.setText("File");
        fileMenu.setFocusable(false);
        fileMenu.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        newPage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newPage.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        newPage.setText("New");
        newPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPageActionPerformed(evt);
            }
        });
        fileMenu.add(newPage);

        openPage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openPage.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        openPage.setText("Open...");
        openPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPageActionPerformed(evt);
            }
        });
        fileMenu.add(openPage);

        saveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveFile.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        saveFile.setText("Save");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        fileMenu.add(saveFile);

        savePage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        savePage.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        savePage.setText("Save As...");
        savePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePageActionPerformed(evt);
            }
        });
        fileMenu.add(savePage);

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.CTRL_MASK));
        exit.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        fileMenu.add(exit);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");
        editMenu.setFocusable(false);
        editMenu.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        editMenu.setMargin(new java.awt.Insets(3, 3, 3, 3));

        cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cut.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cut.setText("Cut");
        cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutActionPerformed(evt);
            }
        });
        editMenu.add(cut);

        copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copy.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        copy.setText("Copy");
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });
        editMenu.add(copy);

        paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        paste.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        paste.setText("Paste");
        paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteActionPerformed(evt);
            }
        });
        editMenu.add(paste);

        delete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        delete.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        editMenu.add(delete);

        selectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        selectAll.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        selectAll.setText("Select All");
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllActionPerformed(evt);
            }
        });
        editMenu.add(selectAll);

        jMenuBar1.add(editMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void newPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPageActionPerformed
        textArea.setText("");
        CurrentFileDirectory = "";
    }//GEN-LAST:event_newPageActionPerformed

    private void openPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPageActionPerformed
        JFileChooser opChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text File/Java", "txt", "java");
        opChooser.setFileFilter(filter);
        int returnVal = opChooser.showOpenDialog(null);
        File chosenFile = opChooser.getSelectedFile();
        
       try {
             if(returnVal == JFileChooser.APPROVE_OPTION){
                BufferedReader br = new BufferedReader(new FileReader(chosenFile));
                CurrentFileDirectory = "";
                textArea.setText("");
                CurrentFileDirectory = chosenFile.getAbsolutePath();
                
            String data;
            while((data = br.readLine()) != null){
            textArea.append(data +"\n");}
            br.close();
             }       
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "ERROR!");
        }
    }//GEN-LAST:event_openPageActionPerformed

    private void savePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePageActionPerformed
        JFileChooser sdChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text File", "txt");
        sdChooser.setFileFilter(filter);
        int returnVal = sdChooser.showSaveDialog(null);
        
        try {
            if(returnVal == JFileChooser.APPROVE_OPTION)
            {
                File directory = sdChooser.getCurrentDirectory();
                String path = directory.getAbsolutePath();
                String FileName = sdChooser.getSelectedFile().getName();
                if(FileName.contains(".txt")){
                // Do nothing.
                }
                else{
                FileName = FileName + ".txt";
                }
                BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(path + "\\" + FileName), "UTF-8"));
                CurrentFileDirectory = path + "\\" + FileName;
                bw.write(textArea.getText());
                bw.close();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "ERROR!");
        }
        
    }//GEN-LAST:event_savePageActionPerformed

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllActionPerformed
        textArea.selectAll();
    }//GEN-LAST:event_selectAllActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        textArea.replaceSelection("");
    }//GEN-LAST:event_deleteActionPerformed

    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
        ClipBoardData = textArea.getSelectedText();
        StringSelection stringSelection = new StringSelection (ClipBoardData);
        Clipboard clpbrd = Toolkit.getDefaultToolkit ().getSystemClipboard ();
        clpbrd.setContents (stringSelection, null);
    }//GEN-LAST:event_copyActionPerformed

    private void pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteActionPerformed
        textArea.append(ClipBoardData);
    }//GEN-LAST:event_pasteActionPerformed

    private void cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutActionPerformed
        ClipBoardData = textArea.getSelectedText();
        StringSelection stringSelection = new StringSelection (ClipBoardData);
        Clipboard clpbrd = Toolkit.getDefaultToolkit ().getSystemClipboard ();
        clpbrd.setContents (stringSelection, null);
        textArea.replaceSelection("");
    }//GEN-LAST:event_cutActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
       if("".equals(CurrentFileDirectory)){
       
           JFileChooser sdChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text File", "txt");
        sdChooser.setFileFilter(filter);
        int returnVal = sdChooser.showSaveDialog(null);
        
        try {
            if(returnVal == JFileChooser.APPROVE_OPTION)
            {
                File directory = sdChooser.getCurrentDirectory();
                String path = directory.getAbsolutePath();
                String FileName = sdChooser.getSelectedFile().getName();
                if(FileName.contains(".txt")){
                // Do nothing.
                }
                else{
                FileName = FileName + ".txt";
                }
                BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(path + "\\" + FileName), "UTF-8"));
                CurrentFileDirectory = path + "\\" + FileName;
                bw.write(textArea.getText());
                bw.close();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "ERROR!");
        }
           
       }else{ 
        try {
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(CurrentFileDirectory), "UTF-8"));
            bw.write(textArea.getText());
            bw.close();
        } catch (IOException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        }
       }
    }//GEN-LAST:event_saveFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Form().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem copy;
    private javax.swing.JMenuItem cut;
    private javax.swing.JMenuItem delete;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem newPage;
    private javax.swing.JMenuItem openPage;
    private javax.swing.JMenuItem paste;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JMenuItem savePage;
    private javax.swing.JMenuItem selectAll;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables

    private void Super(String string) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
